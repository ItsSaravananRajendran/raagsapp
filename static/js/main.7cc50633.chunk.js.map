{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["letters","h","Circle","props","this","touched","traced","row","col","style","height","width","className","React","Component","Row","touchCircle","touchedRowState","tracedRowState","map","key","AudioComp","document","getElementsByClassName","play","src","App","getBlanc","state","audioSrc","divRef","createRef","forEach","method","bind","getH","I","length","J","setState","setTimeout","count","ref","window","setInterval","point","console","log","prevState","clearInterval","e","offsetTop","current","offsetX","offsetLeft","touches","clientX","clientY","Math","floor","isNaN","Array","fill","push","onTouchStart","onTouchMove","onTouchEnd","onClick","compare","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7cc50633.chunk.js","sourcesContent":["import React from 'react';\nimport Style from './App.css';\n\nconst DIAMETER=60;\n\nconst letters = {\n  h:[[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[4,4],[4,5],[4,6],[4,7],[1,7],[2,7],[3,7],[5,7],[6,7],[7,7]]\n}\n\n\n\nclass Circle extends React.Component {\n\n  constructor(props){\n    super(props);\n   //[\"\"].forEach((method)=>this[method]=this[method].bind(this));\n  }\n\n  render(){\n    const {touched,traced,row,col} = this.props;\n    return  <div\n     style={{height:DIAMETER,width:DIAMETER}}\n     className={`circle ${traced ? \"circleTraced\":''} ${touched ? \"circleTouched\":''} `} \n     />\n  }\n}\n\nconst Row = ({col,touchCircle,touchedRowState,tracedRowState}) => {\n  const id = [0,1,2,3,4,5,6,7,8,9,10];\n  return <div className=\"row\">\n    {id.map((key)=>{\n      return <Circle \n      key={`row-${key}`}\n      row={key}\n      col={col}\n      touchCircle={touchCircle}\n      traced={tracedRowState[key]}\n      touched={touchedRowState[key]}\n       />\n    })}\n  </div>\n}\n\nclass AudioComp extends React.Component {\n  componentDidMount() {\n    const audioEl = document.getElementsByClassName(\"audio-element\")[0];\n    audioEl.play()\n  }\n\n  render() {\n    return (\n      <div>\n        <audio className=\"audio-element\">\n          <source src={`${this.props.src}`} ></source>\n        </audio>\n      </div>\n    )\n  }\n};\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    const traced = this.getBlanc();\n    const touched = this.getBlanc();\n    this.state = {traced,touched,audioSrc:false};\n    this.divRef = React.createRef();\n    [\"touchCircle\",\"getH\",\"compare\"].forEach(method=>this[method]=this[method].bind(this));\n  }\n\n  componentDidMount(){\n    this.getH();\n  }\n\n  compare(){\n    const {traced,touched} = this.state;\n    for(let I=0;I<traced.length;I++){\n      for(let J=0;J<traced[I].length;J++){\n        if(traced[I][J]!=touched[I][J]){\n          this.setState({audioSrc:\"/failed.mp3\",traced:this.getBlanc(),touched:this.getBlanc()});\n          setTimeout(()=>{\n            this.setState({audioSrc:null});\n            this.getH()\n          },5000);\n          return;\n        }\n      }\n    }\n    this.setState({audioSrc:\"/success.mp3\"});\n  }\n\n  getH(){\n    this.count = 0;\n    const ref= window.setInterval(()=>{\n      const point = letters.h[this.count++];\n      console.log(point)\n      if(point){\n        this.setState(prevState=>{\n          const {traced}= prevState;\n          traced[point[0]][point[1]] = true;\n          return {traced};\n        })\n      }else{\n        window.clearInterval(ref);\n      }\n    },500);\n  }\n\n  touchCircle(e){\n    const offsetTop = this.divRef.current.offsetTop;\n    const offsetX = this.divRef.current.offsetLeft;\n    const {clientX,clientY} = e.touches[0] || {};\n    if(!offsetX || !offsetTop ) return; \n\n    const row=Math.floor((clientX-offsetX)/DIAMETER);\n    const col=Math.floor((clientY-offsetTop)/DIAMETER);\n    if(row<0 || col < 0|| col> 8 || row>10 || isNaN(col) || isNaN(row)) return;\n    this.setState(prevState=>{\n      const touched = prevState.touched;\n      touched[col][row] = true;\n      return {touched};\n    })\n  }\n\n  getBlanc(){\n    const row = [];\n    for(let I=0;I<9;I++){\n      const col = Array(11).fill(false);\n      row.push(col);\n    }\n    return row;\n  }\n\n\n  render(){\n    const id = [0,1,2,3,4,5,6,7,8];\n    const audioSrc = this.state.audioSrc;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" \n        >\n        <div ref={this.divRef}\n          onTouchStart={this.touchCircle}\n          onTouchMove={this.touchCircle}\n          onTouchEnd={this.touchCircle}>\n        {id.map((key)=>(\n          <Row\n            key={`col-${key}`} \n            col={key}\n            touchedRowState={this.state.touched[key]} \n            tracedRowState={this.state.traced[key]}\n           />))}\n        </div>\n        {audioSrc && <AudioComp src={audioSrc} />}\n        <img src=\"/check.png\" onClick={this.compare}/>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}